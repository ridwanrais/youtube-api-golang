// Code generated by go-swagger; DO NOT EDIT.

package apis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Music API",
    "title": "Music API",
    "contact": {
      "email": "ridwan.rais2@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "virtserver.swaggerhub.com",
  "paths": {
    "/health": {
      "get": {
        "description": "Health check endpoint",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Health"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "$ref": "#/definitions/Health"
                },
                "message": {
                  "description": "success retrieve data",
                  "type": "string",
                  "example": "app running well"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "error"
        }
      }
    },
    "Health": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "UP"
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "tags": [
    {
      "description": "Every request and response about Music API",
      "name": "Music API"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Music API",
    "title": "Music API",
    "contact": {
      "email": "ridwan.rais2@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "virtserver.swaggerhub.com",
  "paths": {
    "/health": {
      "get": {
        "description": "Health check endpoint",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Health"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "$ref": "#/definitions/Health"
                },
                "message": {
                  "description": "success retrieve data",
                  "type": "string",
                  "example": "app running well"
                }
              }
            }
          },
          "400": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "error"
        }
      }
    },
    "Health": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "UP"
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "tags": [
    {
      "description": "Every request and response about Music API",
      "name": "Music API"
    }
  ]
}`))
}
