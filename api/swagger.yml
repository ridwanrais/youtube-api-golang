swagger: "2.0"
info:
  description: "Youtube API"
  version: "1.0.0"
  title: "Youtube API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  contact:
    email: "ridwan.rais2@gmail.com"
# host: "virtserver.swaggerhub.com"
securityDefinitions:
  Bearer:
    type: apiKey
    in: header
    name: Authorization

security:
  - Bearer: []

schemes:
  - http

tags:
  - name: "Youtube API"
    description: "Every request and response about Youtube API"

paths:
  /health:
    get:
      summary: "Health check"
      description: "Health check endpoint"
      tags:
        - "Health"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "success retrieve data"
                example: "app running well"
              data:
                type: object
                $ref: "#/definitions/Health"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"

  /user/register:
    post:
      summary: "Create user"
      description: "Create user/channel endpoint"
      tags:
        - "User"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "body"
          description: "register user/channel"
          schema:
            $ref: "#/definitions/UserRegister"
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "user created successfully"
                example: "user created successfully"
              userID:
                type: string
                example: "1"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /user/login:
    post:
      summary: Login
      description: Login
      tags:
        - Auth
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      security: []
      responses:
        "200":
          description: "Success"
          headers:
            Set-Cookie:
              type: string
              # example: JSESSIONID=abcde12345; Path=/; HttpOnly
          schema:
            type: object
            $ref: "#/definitions/LoginResponse"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  # /user/google:
  #   post:
  #     summary: Login ussing google account
  #     description: "Login ussing google account"
  #     tags:
  #       - OAuth
  /user/{id}:
    put:
      summary: update user
      description: update user
      tags:
        - User
      produces:
        - "application/json"
      parameters:
        - in: "path"
          required: true
          name: "id"
          type: "string"
          description: "The id of user"
        - in: body
          name: "body"
          description: "register user/channel"
          schema:
            $ref: "#/definitions/UserUpdate"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "user edited successfully"
                example: "user edited successfully"
              updatedUser:
                type: object
                $ref: "#/definitions/UserResponse"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
    delete:
      summary: delete user
      description: delete user
      tags:
        - User
      produces:
        - "application/json"
      parameters:
        - in: "path"
          required: true
          name: "id"
          type: "string"
          description: "The id of user"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "user deleted successfully"
                example: "user deleted successfully"
              userID:
                type: string
                example: "1"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
    get:
      summary: get user
      description: get user
      tags:
        - User
      produces:
        - "application/json"
      security: []
      parameters:
        - in: "path"
          required: true
          name: "id"
          type: "string"
          description: "The id of user"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "user gotten successfully"
                example: "user gotten successfully"
              user:
                type: object
                $ref: "#/definitions/UserResponse"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"

  /sub/{user_id}:
    patch:
      summary: subcribe a user
      description: subcribe a user
      tags:
        - Subscription
      produces:
        - "application/json"
      parameters:
        - in: "path"
          required: true
          name: "user_id"
          type: "string"
          description: "The id of user"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "subscribing a user is successful"
                example: "subscribing a user is successful"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /unsub/{user_id}:
    patch:
      summary: unsubcribe a user
      description: unsubcribe a user
      tags:
        - Subscription
      produces:
        - "application/json"
      parameters:
        - in: "path"
          required: true
          name: "user_id"
          type: "string"
          description: "The id of user"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "unsubscribing a user is successful"
                example: "unsubscribing a user is successful"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"

  /like/{video_id}:
    patch:
      summary: like a video
      description: like a video
      tags:
        - Like
      produces:
        - "application/json"
      parameters:
        - in: "path"
          required: true
          name: "video_id"
          type: "string"
          description: "The id of video"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "liking a video is successful"
                example: "liking a video is successful"
              likeCount:
                type: integer
                example: 100
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /dislike/{video_id}:
    patch:
      summary: dislike a video
      description: dislike a video
      tags:
        - Like
      produces:
        - "application/json"
      parameters:
        - in: "path"
          required: true
          name: "video_id"
          type: "string"
          description: "The id of video"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "disliking a video is successful"
                example: "disliking a video is successful"
              dislikeCount:
                type: integer
                example: 100
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"

  /video:
    post:
      summary: "Post video"
      description: "Post video endpoint"
      tags:
        - Video
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: post video
          schema:
            $ref: "#/definitions/VideoPost"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "video created successfully"
                example: "video created successfully"
              videoID:
                type: string
                example: "1"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /video/{id}:
    get:
      summary: "Get Video"
      description: "Get video endpoint"
      tags:
        - Video
      produces:
        - application/json
      security: []
      parameters:
        - in: "path"
          required: true
          name: "id"
          type: "string"
          description: "The id of video"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "video gotten successfully"
                example: "video gotten successfully"
              video:
                type: object
                $ref: "#/definitions/Video"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
    put:
      summary: "Update video"
      description: "Update video endpoint"
      tags:
        - Video
      produces:
        - application/json
      parameters:
        - in: "path"
          required: true
          name: "id"
          type: "string"
          description: "The id of video"
        - in: body
          name: body
          description: update video
          schema:
            $ref: "#/definitions/VideoUpdate"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "video updated successfully"
                example: "video updated successfully"
              video:
                type: object
                $ref: "#/definitions/Video"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
    delete:
      summary: "Delete Video"
      description: "Delete video endpoint"
      tags:
        - Video
      produces:
        - application/json
      parameters:
        - in: "path"
          required: true
          name: "id"
          type: "string"
          description: "The id of video"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "video deleted successfully"
                example: "video deleted successfully"
              videoID:
                type: string
                example: "1"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /video/view/{id}:
    patch:
      summary: "Add View"
      description: "Add video view endpoint"
      tags:
        - Video
      produces:
        - application/json
      parameters:
        - in: "path"
          required: true
          name: "id"
          type: "string"
          description: "The id of video"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "video gotten successfully"
              totalViews:
                type: integer
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /video/trend:
    get:
      summary: "Get trending videos"
      description: "Get trending videos endpoint"
      tags:
        - Video
      produces:
        - application/json
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "trending videos gotten successfully"
              videos:
                type: array
                items:
                  $ref: "#/definitions/Video"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /video/random:
    get:
      summary: "Get random videos"
      description: "Get random videos endpoint"
      tags:
        - Video
      produces:
        - application/json
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "random videos gotten successfully"
              videos:
                type: array
                items:
                  $ref: "#/definitions/Video"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /video/sub:
    get:
      summary: "Get subscribed videos"
      description: "Get subscribed videos endpoint"
      tags:
        - Video
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "random videos gotten successfully"
              videos:
                type: array
                items:
                  $ref: "#/definitions/Video"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /video/tags/:
    get:
      summary: "Search for videos"
      description: "Search for videos endpoint"
      tags:
        - Video
      produces:
        - application/json
      parameters:
        - in: "query"
          required: true
          name: "tags"
          type: string
          description: "search keyword"
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "searched videos gotten successfully"
              videos:
                type: array
                items:
                  $ref: "#/definitions/Video"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /video/search/:
    get:
      summary: "Search for videos"
      description: "Search for videos endpoint"
      tags:
        - Video
      produces:
        - application/json
      parameters:
        - in: "query"
          required: true
          name: "keyword"
          type: "string"
          description: "search keyword"
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "searched videos gotten successfully"
              videos:
                type: array
                items:
                  $ref: "#/definitions/Video"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"

  /comment:
    post:
      summary: "Post comment"
      description: "Post comment endpoint"
      tags:
        - Comment
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: post comment
          schema:
            $ref: "#/definitions/CommentPost"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "comment created successfully"
                example: "comment created successfully"
              commentID:
                type: string
                example: "1"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
    delete:
      summary: "Delete comment"
      description: "Delete comment endpoint"
      tags:
        - Comment
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: delete comment
          schema:
            $ref: "#/definitions/CommentDelete"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "comment deleted successfully"
                example: "comment deleted successfully"
              commentID:
                type: string
                example: "1"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"
  /comments/{videoID}:
    get:
      summary: Get a video's comments
      description: Get a video's comments endpoint
      tags:
        - Comment
      produces:
        - application/json
      parameters:
        - in: path
          required: true
          name: videoID
          type: "string"
          description: "The id of video"
      security: []      
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "comments gotten successfully"
              comments:
                type: array
                items: 
                  $ref: "#/definitions/Comment"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/BadRequest"
        "404":
          $ref: "#/responses/NotFound"



definitions:
  Health:
    type: "object"
    properties:
      status:
        type: string
        example: "UP"

  UserRegister:
    type: object
    required:
      - username
      - email
      - password
    properties:
      username:
        type: string
        example: "0889504178114"
      email:
        type: string
        example: "ridwan.rais2@gmail.com"
      password:
        type: string
        example: "123456"
      img:
        type: string
      subscribers:
        type: number
      subscribedUsers:
        type: array
        items:
          type: string
      # timestamps:
  UserUpdate:
    type: object
    properties:
      username:
        type: string
        example: "0889504178114"
      email:
        type: string
        example: "ridwan.rais2@gmail.com"
      password:
        type: string
        example: "123456"
      img:
        type: string
      subscribers:
        type: number
      subscribedUsers:
        type: array
        items:
          type: string
      # timestamps:
  UserResponse:
    type: object
    properties:
      ID:
        type: string
      username:
        type: string
        example: "0889504178114"
      email:
        type: string
        example: "ridwan.rais2@gmail.com"
      password:
        type: string
        example: "123456"
      img:
        type: string
      subscribers:
        type: number
      subscribedUsers:
        type: array
        items:
          type: string

  LoginRequest:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
  LoginResponse:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      value:
        type: string
      expired_at:
        type: string
      account_type:
        type: string

  VideoPost:
    type: object
    required:
      - title
      - description
      - imgUrl
      - videoUrl
    properties:
      title:
        type: string
        example: "My Video"
      description:
        type: string
        example: "My first video."
      imgUrl:
        type: string
      videoUrl:
        type: string
      tags:
        type: array
        items:
          type: string
  VideoUpdate:
    type: object
    required:
      - title
      - description
      - imgUrl
      - videoUrl
    properties:
      title:
        type: string
        example: "My Video"
      description:
        type: string
        example: "My first video."
      imgUrl:
        type: string
      videoUrl:
        type: string
      tags:
        type: array
        items:
          type: string
  Video:
    type: object
    required:
      - userID
      - title
      - description
      - imgUrl
      - videoUrl
      - views
      - tags
      - likes
      - dislikes
    properties:
      ID:
        type: string
      userID:
        type: string
        example: "1"
      title:
        type: string
        example: "My Video"
      description:
        type: string
        example: "My first video."
      imgUrl:
        type: string
      videoUrl:
        type: string
      views:
        type: integer
      tags:
        type: array
        items:
          type: string
      likes:
        type: array
        items:
          type: string
      dislikes:
        type: array
        items:
          type: string
      createdAt:
        type: string
        example: 2021-09-28T07:38:30.273469Z
      updatedAt:
        type: string
        example: 2021-09-28T07:38:30.273469Z

  CommentPost:
    type: object
    required:
      - videoID
      - description
    properties:
      videoID:
        type: string
        example: "videoID"
      description:
        type: string
        example: "My first comment."
  CommentDelete:
    type: object
    required:
      - videoID
      - commentID
    properties:
      videoID:
        type: string
        example: "videoID"
      commentID:
        type: string
        example: "commentID"

  Comment:
    type: object
    required:
      - userID
      - videoID
      - description
    properties:
      ID:
        type: string
      userID:
        type: string
        example: "1"
      videoID:
        type: string
        example: "My Comment"
      description:
        type: string
        example: "My first comment."
      createdAt:
        type: string
        example: 2021-09-28T07:38:30.273469Z
      updatedAt:
        type: string
        example: 2021-09-28T07:38:30.273469Z

  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
        example: "error"

responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"
  BadRequest:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"
